{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport { getDoc, getFirestore, setDoc, doc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAqQmkeUEkqZncA9PBKcN2z54i71goKBvw\",\n  authDomain: \"alpha-nutrition-supplements.firebaseapp.com\",\n  projectId: \"alpha-nutrition-supplements\",\n  storageBucket: \"alpha-nutrition-supplements.appspot.com\",\n  messagingSenderId: \"173511615944\",\n  appId: \"1:173511615944:web:ba63e1ad8d4f2ec3cfccfd\",\n  measurementId: \"G-W07ZHNF9ZK\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\n\n// export const signInWithGooglePopup = () =>\n//   signInWithPopup(auth, googleProvider);\n\nexport const signInWithGoogle = async () => {\n  try {\n    const result = await signInWithPopup(auth, googleProvider);\n    const user = result.user;\n    const token = await user.getIdToken();\n    console.log(\"JWT Token:\", token);\n    return token;\n  } catch (error) {\n    console.error(\"Error during sign in:\", error);\n    throw error;\n  }\n};\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async (userAuth, additionalInformation = {}) => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        isAdmin: false,\n        ...additionalInformation\n      });\n\n      // Save user in MongoDB\n      await fetch(\"http://localhost:9000/api/users\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${await userAuth.getIdToken()}`\n        },\n        body: JSON.stringify({\n          uid: userAuth.uid,\n          displayName,\n          email,\n          createdAt,\n          isAdmin: false\n        })\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n  await createUserDocumentFromAuth(userCredential.user);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => await signOut(auth);\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback);\nexport const sendRequest = async () => {\n  const auth = getAuth();\n  const user = auth.currentUser;\n  if (user) {\n    const token = await user.getIdToken();\n    fetch(\"http://localhost:9000/api/users/me\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  }\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","onAuthStateChanged","getDoc","getFirestore","setDoc","doc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGoogle","result","user","token","getIdToken","console","log","error","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","isAdmin","fetch","method","headers","Authorization","body","JSON","stringify","message","createAuthUserWithEmailAndPassword","password","userCredential","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback","sendRequest","currentUser","then","response","json","data","catch"],"sources":["C:/Users/lenovo/OneDrive/Desktop/Freelance/client/alpha-nutrition/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport {\r\n  getAuth,\r\n  signInWithRedirect,\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n  signOut,\r\n  onAuthStateChanged,\r\n} from \"firebase/auth\";\r\nimport { getDoc, getFirestore, setDoc, doc } from \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAqQmkeUEkqZncA9PBKcN2z54i71goKBvw\",\r\n  authDomain: \"alpha-nutrition-supplements.firebaseapp.com\",\r\n  projectId: \"alpha-nutrition-supplements\",\r\n  storageBucket: \"alpha-nutrition-supplements.appspot.com\",\r\n  messagingSenderId: \"173511615944\",\r\n  appId: \"1:173511615944:web:ba63e1ad8d4f2ec3cfccfd\",\r\n  measurementId: \"G-W07ZHNF9ZK\",\r\n};\r\n\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nconst googleProvider = new GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\r\n\r\nexport const auth = getAuth();\r\n\r\n// export const signInWithGooglePopup = () =>\r\n//   signInWithPopup(auth, googleProvider);\r\n\r\nexport const signInWithGoogle = async () => {\r\n  try {\r\n    const result = await signInWithPopup(auth, googleProvider);\r\n    const user = result.user;\r\n    const token = await user.getIdToken();\r\n    console.log(\"JWT Token:\", token);\r\n    return token;\r\n  } catch (error) {\r\n    console.error(\"Error during sign in:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const signInWithGoogleRedirect = () =>\r\n  signInWithRedirect(auth, googleProvider);\r\n\r\nexport const db = getFirestore();\r\n\r\nexport const createUserDocumentFromAuth = async (\r\n  userAuth,\r\n  additionalInformation = {}\r\n) => {\r\n  if (!userAuth) return;\r\n\r\n  const userDocRef = doc(db, \"users\", userAuth.uid);\r\n  const userSnapshot = await getDoc(userDocRef);\r\n\r\n  if (!userSnapshot.exists()) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await setDoc(userDocRef, {\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        isAdmin: false,\r\n        ...additionalInformation,\r\n      });\r\n\r\n      // Save user in MongoDB\r\n      await fetch(\"http://localhost:9000/api/users\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${await userAuth.getIdToken()}`,\r\n        },\r\n        body: JSON.stringify({\r\n          uid: userAuth.uid,\r\n          displayName,\r\n          email,\r\n          createdAt,\r\n          isAdmin: false,\r\n        }),\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error creating the user\", error.message);\r\n    }\r\n  }\r\n\r\n  return userDocRef;\r\n};\r\n\r\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\r\n  if (!email || !password) return;\r\n\r\n  const userCredential = await createUserWithEmailAndPassword(\r\n    auth,\r\n    email,\r\n    password\r\n  );\r\n  await createUserDocumentFromAuth(userCredential.user);\r\n};\r\n\r\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\r\n  if (!email || !password) return;\r\n\r\n  return await signInWithEmailAndPassword(auth, email, password);\r\n};\r\n\r\nexport const signOutUser = async () => await signOut(auth);\r\n\r\nexport const onAuthStateChangedListener = (callback) =>\r\n  onAuthStateChanged(auth, callback);\r\n\r\nexport const sendRequest = async () => {\r\n  const auth = getAuth();\r\n  const user = auth.currentUser;\r\n  if (user) {\r\n    const token = await user.getIdToken();\r\n    fetch(\"http://localhost:9000/api/users/me\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n      });\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}