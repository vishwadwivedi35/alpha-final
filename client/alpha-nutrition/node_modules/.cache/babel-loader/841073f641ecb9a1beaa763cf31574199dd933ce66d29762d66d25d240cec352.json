{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\OneDrive\\\\Desktop\\\\Freelance\\\\client\\\\alpha-nutrition\\\\src\\\\context\\\\CartContext.jsx\",\n  _s = $RefreshSig$();\n// import React, { createContext, useState } from \"react\";\n\n// export const CartContext = createContext();\n\n// export const CartProvider = ({ children }) => {\n//   const [cartItems, setCartItems] = useState([]);\n\n//   const addToCart = (item) => {\n//     const existingItem = cartItems.find((i) => i.id === item.id);\n\n//     if (existingItem) {\n//       updateCartItem(item.id, existingItem.quantity + item.quantity);\n//     } else {\n//       setCartItems([...cartItems, { ...item, quantity: item.quantity }]);\n//     }\n//   };\n\n//   const removeFromCart = (item) => {\n//     setCartItems(cartItems.filter((cartItem, i) => i.id !== cartItem.id));\n//   };\n\n//   const updateCartItem = (itemId, quantity) => {\n//     const newCartItems = cartItems.map((item) =>\n//       item.id === itemId ? { ...item, quantity } : item\n//     );\n//     setCartItems(newCartItems);\n//   };\n\n//   return (\n//     <CartContext.Provider\n//       value={{ cartItems, addToCart, removeFromCart, updateCartItem }}\n//     >\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// import React, { createContext, useState } from \"react\";\n\n// export const CartContext = createContext();\n\n// export const CartProvider = ({ children }) => {\n//   const [cartItems, setCartItems] = useState([]);\n\n//   const addToCart = (item) => {\n//     const existingItemIndex = cartItems.findIndex((i) => i.id === item.id);\n\n//     if (existingItemIndex !== -1) {\n//       updateCartItem(\n//         existingItemIndex,\n//         cartItems[existingItemIndex].quantity + item.quantity\n//       );\n//     } else {\n//       setCartItems([...cartItems, { ...item, quantity: item.quantity }]);\n//     }\n//   };\n\n//   const removeFromCart = (index) => {\n//     const newCartItems = cartItems.filter((_, i) => i !== index);\n//     setCartItems(newCartItems);\n//   };\n\n//   const updateCartItem = (index, quantity) => {\n//     const newCartItems = cartItems.map((item, i) =>\n//       i === index ? { ...item, quantity } : item\n//     );\n//     setCartItems(newCartItems);\n//   };\n\n//   return (\n//     <CartContext.Provider\n//       value={{ cartItems, addToCart, removeFromCart, updateCartItem }}\n//     >\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\nimport React, { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  const addToCart = item => {\n    const existingItemIndex = cartItems.findIndex(i => i.id === item.id);\n    if (existingItemIndex !== -1) {\n      const updatedCartItems = cartItems.map((cartItem, index) => index === existingItemIndex ? {\n        ...cartItem,\n        quantity: cartItem.quantity + item.quantity\n      } : cartItem);\n      setCartItems(updatedCartItems);\n    } else {\n      setCartItems([...cartItems, {\n        ...item,\n        quantity: item.quantity\n      }]);\n    }\n  };\n  const removeFromCart = id => {\n    setCartItems(cartItems.filter(cartItem => cartItem.id !== id));\n  };\n  const updateCartItem = (itemId, quantity) => {\n    const newCartItems = cartItems.map(item => item.id === itemId ? {\n      ...item,\n      quantity\n    } : item);\n    setCartItems(newCartItems);\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      addToCart,\n      removeFromCart,\n      updateCartItem\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"jeyeRm/hZ/3zvXF4PAYTLSHDNRs=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","addToCart","item","existingItemIndex","findIndex","i","id","updatedCartItems","map","cartItem","index","quantity","removeFromCart","filter","updateCartItem","itemId","newCartItems","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/lenovo/OneDrive/Desktop/Freelance/client/alpha-nutrition/src/context/CartContext.jsx"],"sourcesContent":["// import React, { createContext, useState } from \"react\";\r\n\r\n// export const CartContext = createContext();\r\n\r\n// export const CartProvider = ({ children }) => {\r\n//   const [cartItems, setCartItems] = useState([]);\r\n\r\n//   const addToCart = (item) => {\r\n//     const existingItem = cartItems.find((i) => i.id === item.id);\r\n\r\n//     if (existingItem) {\r\n//       updateCartItem(item.id, existingItem.quantity + item.quantity);\r\n//     } else {\r\n//       setCartItems([...cartItems, { ...item, quantity: item.quantity }]);\r\n//     }\r\n//   };\r\n\r\n//   const removeFromCart = (item) => {\r\n//     setCartItems(cartItems.filter((cartItem, i) => i.id !== cartItem.id));\r\n//   };\r\n\r\n//   const updateCartItem = (itemId, quantity) => {\r\n//     const newCartItems = cartItems.map((item) =>\r\n//       item.id === itemId ? { ...item, quantity } : item\r\n//     );\r\n//     setCartItems(newCartItems);\r\n//   };\r\n\r\n//   return (\r\n//     <CartContext.Provider\r\n//       value={{ cartItems, addToCart, removeFromCart, updateCartItem }}\r\n//     >\r\n//       {children}\r\n//     </CartContext.Provider>\r\n//   );\r\n// };\r\n\r\n// import React, { createContext, useState } from \"react\";\r\n\r\n// export const CartContext = createContext();\r\n\r\n// export const CartProvider = ({ children }) => {\r\n//   const [cartItems, setCartItems] = useState([]);\r\n\r\n//   const addToCart = (item) => {\r\n//     const existingItemIndex = cartItems.findIndex((i) => i.id === item.id);\r\n\r\n//     if (existingItemIndex !== -1) {\r\n//       updateCartItem(\r\n//         existingItemIndex,\r\n//         cartItems[existingItemIndex].quantity + item.quantity\r\n//       );\r\n//     } else {\r\n//       setCartItems([...cartItems, { ...item, quantity: item.quantity }]);\r\n//     }\r\n//   };\r\n\r\n//   const removeFromCart = (index) => {\r\n//     const newCartItems = cartItems.filter((_, i) => i !== index);\r\n//     setCartItems(newCartItems);\r\n//   };\r\n\r\n//   const updateCartItem = (index, quantity) => {\r\n//     const newCartItems = cartItems.map((item, i) =>\r\n//       i === index ? { ...item, quantity } : item\r\n//     );\r\n//     setCartItems(newCartItems);\r\n//   };\r\n\r\n//   return (\r\n//     <CartContext.Provider\r\n//       value={{ cartItems, addToCart, removeFromCart, updateCartItem }}\r\n//     >\r\n//       {children}\r\n//     </CartContext.Provider>\r\n//   );\r\n// };\r\n\r\nimport React, { createContext, useState } from \"react\";\r\n\r\nexport const CartContext = createContext();\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n\r\n  const addToCart = (item) => {\r\n    const existingItemIndex = cartItems.findIndex((i) => i.id === item.id);\r\n\r\n    if (existingItemIndex !== -1) {\r\n      const updatedCartItems = cartItems.map((cartItem, index) =>\r\n        index === existingItemIndex\r\n          ? { ...cartItem, quantity: cartItem.quantity + item.quantity }\r\n          : cartItem\r\n      );\r\n      setCartItems(updatedCartItems);\r\n    } else {\r\n      setCartItems([...cartItems, { ...item, quantity: item.quantity }]);\r\n    }\r\n  };\r\n\r\n  const removeFromCart = (id) => {\r\n    setCartItems(cartItems.filter((cartItem) => cartItem.id !== id));\r\n  };\r\n\r\n  const updateCartItem = (itemId, quantity) => {\r\n    const newCartItems = cartItems.map((item) =>\r\n      item.id === itemId ? { ...item, quantity } : item\r\n    );\r\n    setCartItems(newCartItems);\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{ cartItems, addToCart, removeFromCart, updateCartItem }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMK,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMS,SAAS,GAAIC,IAAI,IAAK;IAC1B,MAAMC,iBAAiB,GAAGJ,SAAS,CAACK,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKJ,IAAI,CAACI,EAAE,CAAC;IAEtE,IAAIH,iBAAiB,KAAK,CAAC,CAAC,EAAE;MAC5B,MAAMI,gBAAgB,GAAGR,SAAS,CAACS,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,KACrDA,KAAK,KAAKP,iBAAiB,GACvB;QAAE,GAAGM,QAAQ;QAAEE,QAAQ,EAAEF,QAAQ,CAACE,QAAQ,GAAGT,IAAI,CAACS;MAAS,CAAC,GAC5DF,QACN,CAAC;MACDT,YAAY,CAACO,gBAAgB,CAAC;IAChC,CAAC,MAAM;MACLP,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAE;QAAE,GAAGG,IAAI;QAAES,QAAQ,EAAET,IAAI,CAACS;MAAS,CAAC,CAAC,CAAC;IACpE;EACF,CAAC;EAED,MAAMC,cAAc,GAAIN,EAAE,IAAK;IAC7BN,YAAY,CAACD,SAAS,CAACc,MAAM,CAAEJ,QAAQ,IAAKA,QAAQ,CAACH,EAAE,KAAKA,EAAE,CAAC,CAAC;EAClE,CAAC;EAED,MAAMQ,cAAc,GAAGA,CAACC,MAAM,EAAEJ,QAAQ,KAAK;IAC3C,MAAMK,YAAY,GAAGjB,SAAS,CAACS,GAAG,CAAEN,IAAI,IACtCA,IAAI,CAACI,EAAE,KAAKS,MAAM,GAAG;MAAE,GAAGb,IAAI;MAAES;IAAS,CAAC,GAAGT,IAC/C,CAAC;IACDF,YAAY,CAACgB,YAAY,CAAC;EAC5B,CAAC;EAED,oBACEtB,OAAA,CAACC,WAAW,CAACsB,QAAQ;IACnBC,KAAK,EAAE;MAAEnB,SAAS;MAAEE,SAAS;MAAEW,cAAc;MAAEE;IAAe,CAAE;IAAAjB,QAAA,EAE/DA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACxB,EAAA,CApCWF,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}